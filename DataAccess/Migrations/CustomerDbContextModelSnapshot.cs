// <auto-generated />
using System;
using CustomerTask;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(CustomerDbContext))]
    partial class CustomerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CustomerTask.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasColumnType("character varying");

                    b.Property<bool>("Isdelete")
                        .HasColumnType("boolean");

                    b.Property<string>("MailingList")
                        .HasColumnType("character varying")
                        .HasColumnName("Mailing List");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("Telephone")
                        .HasColumnType("character varying");

                    b.Property<string>("Username")
                        .HasColumnType("character varying");

                    b.HasKey("Id")
                        .HasName("Contact_pkey");

                    b.HasIndex("CustomerId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("CustomerTask.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Ac")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("AC");

                    b.Property<string>("Address1")
                        .HasColumnType("character varying")
                        .HasColumnName("address1");

                    b.Property<string>("Address2")
                        .HasColumnType("character varying")
                        .HasColumnName("address2");

                    b.Property<string>("Country")
                        .HasColumnType("character varying")
                        .HasColumnName("country");

                    b.Property<string>("County")
                        .HasColumnType("character varying")
                        .HasColumnName("county");

                    b.Property<string>("Currency")
                        .HasColumnType("character varying")
                        .HasColumnName("currency");

                    b.Property<string>("Email")
                        .HasColumnType("character varying")
                        .HasColumnName("email");

                    b.Property<bool?>("Isdelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("Isdelete")
                        .HasDefaultValueSql("false");

                    b.Property<bool?>("Issubscribe")
                        .HasColumnType("boolean")
                        .HasColumnName("issubscribe");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<string>("Postcode")
                        .HasColumnType("character varying")
                        .HasColumnName("postcode");

                    b.Property<string>("Relation")
                        .HasColumnType("character varying")
                        .HasColumnName("relation");

                    b.Property<string>("Telephone")
                        .HasColumnType("character varying")
                        .HasColumnName("telephone");

                    b.Property<string>("Town")
                        .HasColumnType("character varying")
                        .HasColumnName("town");

                    b.HasKey("Id")
                        .HasName("customer_pkey");

                    b.ToTable("customer");
                });

            modelBuilder.Entity("CustomerTask.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<bool>("Isdelete")
                        .HasColumnType("boolean");

                    b.Property<bool>("Isselect")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.HasKey("Id")
                        .HasName("Group_pkey");

                    b.HasIndex("CustomerId");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("CustomerTask.Mapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<int?>("GroupId")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("Mapping_pkey");

                    b.HasIndex("CustomerId");

                    b.HasIndex("GroupId");

                    b.ToTable("Mapping");
                });

            modelBuilder.Entity("CustomerTask.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("GroupId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.HasKey("Id")
                        .HasName("Supplier_pkey");

                    b.HasIndex("GroupId");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("DataAccess.DataModels.LocalUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LocalUsers");
                });

            modelBuilder.Entity("CustomerTask.Contact", b =>
                {
                    b.HasOne("CustomerTask.Customer", "Customer")
                        .WithMany("Contacts")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("Contact_CustomerId_fkey");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CustomerTask.Group", b =>
                {
                    b.HasOne("CustomerTask.Customer", "Customer")
                        .WithMany("Groups")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("Group_CustomerId_fkey");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CustomerTask.Mapping", b =>
                {
                    b.HasOne("CustomerTask.Customer", "Customer")
                        .WithMany("Mappings")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("withcustomer");

                    b.HasOne("CustomerTask.Group", "Group")
                        .WithMany("Mappings")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("withgroup");

                    b.Navigation("Customer");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("CustomerTask.Supplier", b =>
                {
                    b.HasOne("CustomerTask.Group", "Group")
                        .WithMany("Suppliers")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("withgroup");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("CustomerTask.Customer", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("Groups");

                    b.Navigation("Mappings");
                });

            modelBuilder.Entity("CustomerTask.Group", b =>
                {
                    b.Navigation("Mappings");

                    b.Navigation("Suppliers");
                });
#pragma warning restore 612, 618
        }
    }
}
